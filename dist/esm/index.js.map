{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,UAAU,GAAG,cAAc,CAAwB,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAEhF,IAAI,cAA2B,CAAC;AAEhC,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,UAAU,CAAC,iBAAiB,EAAE,CAAC;IAC1D,cAAc,GAAG,UAAU,CAAC;IAC5B,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,iBAAiB;IAC/B,IAAI,cAAc,EAAE;QAClB,OAAO,cAAc,CAAC;KACvB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;AACH,CAAC;AAED,cAAc,eAAe,CAAC;AAC9B,eAAe,EAAE,yBAAyB,EAAE,iBAAiB,EAAE,CAAA;AAC/D,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type {CapacitorOSHackPlugin, Interface} from './definitions';\n\nconst osPromises = registerPlugin<CapacitorOSHackPlugin>('CapacitorOSHack', {});\n\nlet interfaceCache: Interface[];\n\nexport async function prefetchNetworkInterfaces(): Promise<Interface[]> {\n  const {interfaces} = await osPromises.networkInterfaces();\n  interfaceCache = interfaces;\n  return interfaces;\n}\n\nexport function networkInterfaces(): Interface[] {\n  if (interfaceCache) {\n    return interfaceCache;\n  } else {\n    throw new Error(\"You must await prefetchNetworkInterfaces first!\");\n  }\n}\n\nexport * from './definitions';\nexport default { prefetchNetworkInterfaces, networkInterfaces }\nexport { osPromises };\n"]}